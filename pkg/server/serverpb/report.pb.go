// Code generated by protoc-gen-gogo.
// source: cockroach/pkg/server/serverpb/report.proto
// DO NOT EDIT!

package serverpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReportProblemRangesRequest struct {
	NodeID string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *ReportProblemRangesRequest) Reset()                    { *m = ReportProblemRangesRequest{} }
func (m *ReportProblemRangesRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportProblemRangesRequest) ProtoMessage()               {}
func (*ReportProblemRangesRequest) Descriptor() ([]byte, []int) { return fileDescriptorReport, []int{0} }

type ReportProblemRangesResponse struct {
	// If node_id is greater than 0, then this response is only representative of
	// a single node's knowledge.
	NodeID                           github_com_cockroachdb_cockroach_pkg_roachpb.NodeID    `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	Failures                         []ReportProblemRangesResponse_Failures                 `protobuf:"bytes,2,rep,name=failures" json:"failures"`
	UnavailableRangeIDs              []github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,3,rep,packed,name=unavailable_range_ids,json=unavailableRangeIds,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"unavailable_range_ids,omitempty"`
	RaftLeaderNotLeaseHolderRangeIDs []github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,4,rep,packed,name=raft_leader_not_lease_holder_range_ids,json=raftLeaderNotLeaseHolderRangeIds,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"raft_leader_not_lease_holder_range_ids,omitempty"`
	NoRaftLeaderRangeIDs             []github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,5,rep,packed,name=no_raft_leader_range_ids,json=noRaftLeaderRangeIds,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"no_raft_leader_range_ids,omitempty"`
	NoLeaseRangeIDs                  []github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,6,rep,packed,name=no_lease_range_ids,json=noLeaseRangeIds,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"no_lease_range_ids,omitempty"`
	UnderreplicatedRangeIDs          []github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,7,rep,packed,name=underreplicated_range_ids,json=underreplicatedRangeIds,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"underreplicated_range_ids,omitempty"`
}

func (m *ReportProblemRangesResponse) Reset()         { *m = ReportProblemRangesResponse{} }
func (m *ReportProblemRangesResponse) String() string { return proto.CompactTextString(m) }
func (*ReportProblemRangesResponse) ProtoMessage()    {}
func (*ReportProblemRangesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorReport, []int{1}
}

type ReportProblemRangesResponse_Failures struct {
	NodeID       github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	ErrorMessage string                                              `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *ReportProblemRangesResponse_Failures) Reset()         { *m = ReportProblemRangesResponse_Failures{} }
func (m *ReportProblemRangesResponse_Failures) String() string { return proto.CompactTextString(m) }
func (*ReportProblemRangesResponse_Failures) ProtoMessage()    {}
func (*ReportProblemRangesResponse_Failures) Descriptor() ([]byte, []int) {
	return fileDescriptorReport, []int{1, 0}
}

func init() {
	proto.RegisterType((*ReportProblemRangesRequest)(nil), "cockroach.server.serverpb.ReportProblemRangesRequest")
	proto.RegisterType((*ReportProblemRangesResponse)(nil), "cockroach.server.serverpb.ReportProblemRangesResponse")
	proto.RegisterType((*ReportProblemRangesResponse_Failures)(nil), "cockroach.server.serverpb.ReportProblemRangesResponse.Failures")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Report service

type ReportClient interface {
	ProblemRanges(ctx context.Context, in *ReportProblemRangesRequest, opts ...grpc.CallOption) (*ReportProblemRangesResponse, error)
}

type reportClient struct {
	cc *grpc.ClientConn
}

func NewReportClient(cc *grpc.ClientConn) ReportClient {
	return &reportClient{cc}
}

func (c *reportClient) ProblemRanges(ctx context.Context, in *ReportProblemRangesRequest, opts ...grpc.CallOption) (*ReportProblemRangesResponse, error) {
	out := new(ReportProblemRangesResponse)
	err := grpc.Invoke(ctx, "/cockroach.server.serverpb.Report/ProblemRanges", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Report service

type ReportServer interface {
	ProblemRanges(context.Context, *ReportProblemRangesRequest) (*ReportProblemRangesResponse, error)
}

func RegisterReportServer(s *grpc.Server, srv ReportServer) {
	s.RegisterService(&_Report_serviceDesc, srv)
}

func _Report_ProblemRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportProblemRangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).ProblemRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.Report/ProblemRanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).ProblemRanges(ctx, req.(*ReportProblemRangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Report_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.server.serverpb.Report",
	HandlerType: (*ReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProblemRanges",
			Handler:    _Report_ProblemRanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cockroach/pkg/server/serverpb/report.proto",
}

func (m *ReportProblemRangesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportProblemRangesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReport(dAtA, i, uint64(len(m.NodeID)))
		i += copy(dAtA[i:], m.NodeID)
	}
	return i, nil
}

func (m *ReportProblemRangesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportProblemRangesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReport(dAtA, i, uint64(m.NodeID))
	}
	if len(m.Failures) > 0 {
		for _, msg := range m.Failures {
			dAtA[i] = 0x12
			i++
			i = encodeVarintReport(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UnavailableRangeIDs) > 0 {
		dAtA2 := make([]byte, len(m.UnavailableRangeIDs)*10)
		var j1 int
		for _, num1 := range m.UnavailableRangeIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintReport(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.RaftLeaderNotLeaseHolderRangeIDs) > 0 {
		dAtA4 := make([]byte, len(m.RaftLeaderNotLeaseHolderRangeIDs)*10)
		var j3 int
		for _, num1 := range m.RaftLeaderNotLeaseHolderRangeIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintReport(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.NoRaftLeaderRangeIDs) > 0 {
		dAtA6 := make([]byte, len(m.NoRaftLeaderRangeIDs)*10)
		var j5 int
		for _, num1 := range m.NoRaftLeaderRangeIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintReport(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.NoLeaseRangeIDs) > 0 {
		dAtA8 := make([]byte, len(m.NoLeaseRangeIDs)*10)
		var j7 int
		for _, num1 := range m.NoLeaseRangeIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintReport(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if len(m.UnderreplicatedRangeIDs) > 0 {
		dAtA10 := make([]byte, len(m.UnderreplicatedRangeIDs)*10)
		var j9 int
		for _, num1 := range m.UnderreplicatedRangeIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintReport(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func (m *ReportProblemRangesResponse_Failures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportProblemRangesResponse_Failures) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReport(dAtA, i, uint64(m.NodeID))
	}
	if len(m.ErrorMessage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReport(dAtA, i, uint64(len(m.ErrorMessage)))
		i += copy(dAtA[i:], m.ErrorMessage)
	}
	return i, nil
}

func encodeFixed64Report(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Report(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintReport(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReportProblemRangesRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	return n
}

func (m *ReportProblemRangesResponse) Size() (n int) {
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovReport(uint64(m.NodeID))
	}
	if len(m.Failures) > 0 {
		for _, e := range m.Failures {
			l = e.Size()
			n += 1 + l + sovReport(uint64(l))
		}
	}
	if len(m.UnavailableRangeIDs) > 0 {
		l = 0
		for _, e := range m.UnavailableRangeIDs {
			l += sovReport(uint64(e))
		}
		n += 1 + sovReport(uint64(l)) + l
	}
	if len(m.RaftLeaderNotLeaseHolderRangeIDs) > 0 {
		l = 0
		for _, e := range m.RaftLeaderNotLeaseHolderRangeIDs {
			l += sovReport(uint64(e))
		}
		n += 1 + sovReport(uint64(l)) + l
	}
	if len(m.NoRaftLeaderRangeIDs) > 0 {
		l = 0
		for _, e := range m.NoRaftLeaderRangeIDs {
			l += sovReport(uint64(e))
		}
		n += 1 + sovReport(uint64(l)) + l
	}
	if len(m.NoLeaseRangeIDs) > 0 {
		l = 0
		for _, e := range m.NoLeaseRangeIDs {
			l += sovReport(uint64(e))
		}
		n += 1 + sovReport(uint64(l)) + l
	}
	if len(m.UnderreplicatedRangeIDs) > 0 {
		l = 0
		for _, e := range m.UnderreplicatedRangeIDs {
			l += sovReport(uint64(e))
		}
		n += 1 + sovReport(uint64(l)) + l
	}
	return n
}

func (m *ReportProblemRangesResponse_Failures) Size() (n int) {
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovReport(uint64(m.NodeID))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	return n
}

func sovReport(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReport(x uint64) (n int) {
	return sovReport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReportProblemRangesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportProblemRangesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportProblemRangesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportProblemRangesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportProblemRangesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportProblemRangesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Failures = append(m.Failures, ReportProblemRangesResponse_Failures{})
			if err := m.Failures[len(m.Failures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_roachpb.RangeID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnavailableRangeIDs = append(m.UnavailableRangeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReport
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_roachpb.RangeID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnavailableRangeIDs = append(m.UnavailableRangeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnavailableRangeIDs", wireType)
			}
		case 4:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_roachpb.RangeID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RaftLeaderNotLeaseHolderRangeIDs = append(m.RaftLeaderNotLeaseHolderRangeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReport
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_roachpb.RangeID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RaftLeaderNotLeaseHolderRangeIDs = append(m.RaftLeaderNotLeaseHolderRangeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftLeaderNotLeaseHolderRangeIDs", wireType)
			}
		case 5:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_roachpb.RangeID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoRaftLeaderRangeIDs = append(m.NoRaftLeaderRangeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReport
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_roachpb.RangeID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoRaftLeaderRangeIDs = append(m.NoRaftLeaderRangeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoRaftLeaderRangeIDs", wireType)
			}
		case 6:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_roachpb.RangeID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NoLeaseRangeIDs = append(m.NoLeaseRangeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReport
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_roachpb.RangeID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NoLeaseRangeIDs = append(m.NoLeaseRangeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLeaseRangeIDs", wireType)
			}
		case 7:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_roachpb.RangeID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnderreplicatedRangeIDs = append(m.UnderreplicatedRangeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReport
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_roachpb.RangeID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnderreplicatedRangeIDs = append(m.UnderreplicatedRangeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderreplicatedRangeIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportProblemRangesResponse_Failures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthReport
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReport
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReport(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReport = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReport   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cockroach/pkg/server/serverpb/report.proto", fileDescriptorReport) }

var fileDescriptorReport = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xc1, 0x6b, 0xd4, 0x4e,
	0x14, 0xc7, 0x3b, 0xdd, 0x76, 0xbb, 0xbf, 0xf9, 0x59, 0x0a, 0xd3, 0x6a, 0xd3, 0x55, 0x92, 0x65,
	0x0b, 0x52, 0x3c, 0x24, 0xd0, 0xaa, 0x57, 0xe9, 0x52, 0xc4, 0xa2, 0xae, 0x25, 0xd2, 0x4b, 0x11,
	0xc2, 0x64, 0x67, 0x9a, 0x86, 0xa6, 0xf3, 0xe2, 0x4c, 0x52, 0x3c, 0xeb, 0x45, 0xf0, 0xa0, 0xe0,
	0xdd, 0xbb, 0x17, 0xcf, 0xfe, 0x09, 0x3d, 0x0a, 0x5e, 0x3c, 0x05, 0x8d, 0xfe, 0x15, 0x3d, 0x49,
	0x26, 0xbb, 0x9b, 0x5d, 0xad, 0x85, 0xba, 0x78, 0xda, 0xc7, 0xcc, 0xf7, 0x7d, 0xe7, 0xf3, 0xde,
	0xe6, 0x3d, 0x7c, 0xa3, 0x07, 0xbd, 0x43, 0x09, 0xb4, 0x77, 0xe0, 0xc4, 0x87, 0x81, 0xa3, 0xb8,
	0x3c, 0xe6, 0xb2, 0xff, 0x13, 0xfb, 0x8e, 0xe4, 0x31, 0xc8, 0xc4, 0x8e, 0x25, 0x24, 0x40, 0x56,
	0x86, 0x5a, 0xbb, 0x14, 0xd8, 0x03, 0x5d, 0x73, 0x29, 0x80, 0x00, 0xb4, 0xca, 0x29, 0xa2, 0x32,
	0xa1, 0x79, 0x2d, 0x00, 0x08, 0x22, 0xee, 0xd0, 0x38, 0x74, 0xa8, 0x10, 0x90, 0xd0, 0x24, 0x04,
	0xa1, 0xca, 0xdb, 0xf6, 0x26, 0x6e, 0xba, 0xda, 0x7e, 0x47, 0x82, 0x1f, 0xf1, 0x23, 0x97, 0x8a,
	0x80, 0x2b, 0x97, 0x3f, 0x4d, 0xb9, 0x4a, 0xc8, 0x2a, 0x9e, 0x13, 0xc0, 0xb8, 0x17, 0x32, 0x03,
	0xb5, 0xd0, 0xda, 0x7f, 0x1d, 0x9c, 0x67, 0x56, 0xbd, 0x0b, 0x8c, 0x6f, 0x6f, 0xb9, 0xf5, 0xe2,
	0x6a, 0x9b, 0xb5, 0x3f, 0x36, 0xf0, 0xd5, 0x33, 0x3d, 0x54, 0x0c, 0x42, 0x71, 0xb2, 0x37, 0x6e,
	0x32, 0xdb, 0xd9, 0xac, 0x4c, 0x4e, 0x33, 0x6b, 0x23, 0x08, 0x93, 0x83, 0xd4, 0xb7, 0x7b, 0x70,
	0xe4, 0x0c, 0x6b, 0x63, 0xbe, 0x33, 0xde, 0x13, 0x1d, 0xc5, 0xbe, 0x3d, 0xfe, 0x36, 0xa1, 0xb8,
	0xb1, 0x4f, 0xc3, 0x28, 0x95, 0x5c, 0x19, 0xd3, 0xad, 0xda, 0xda, 0xff, 0xeb, 0x77, 0xec, 0x3f,
	0x36, 0xc8, 0x3e, 0x87, 0xd2, 0xbe, 0xdb, 0xb7, 0xe9, 0xcc, 0x9c, 0x64, 0xd6, 0x94, 0x3b, 0xb4,
	0x25, 0x2f, 0x10, 0xbe, 0x9c, 0x0a, 0x7a, 0x4c, 0xc3, 0x88, 0xfa, 0x11, 0xf7, 0x64, 0x91, 0xe7,
	0x85, 0x4c, 0x19, 0xb5, 0x56, 0x6d, 0xad, 0xd6, 0x79, 0x94, 0x67, 0xd6, 0xe2, 0x6e, 0x25, 0xd0,
	0xbe, 0xdb, 0x5b, 0xea, 0x34, 0xb3, 0x6e, 0x5e, 0xa8, 0xb4, 0x7e, 0xa2, 0xbb, 0x98, 0xfe, 0x6a,
	0xc6, 0x14, 0xf9, 0x80, 0xf0, 0x75, 0x49, 0xf7, 0x13, 0x2f, 0xe2, 0x94, 0x71, 0xe9, 0x09, 0xd0,
	0xa1, 0xe2, 0xde, 0x01, 0x44, 0xc5, 0x41, 0x85, 0x35, 0xa3, 0xb1, 0x9e, 0xe4, 0x99, 0xd5, 0x72,
	0xe9, 0x7e, 0xf2, 0x40, 0x27, 0x74, 0xa1, 0x08, 0x14, 0xbf, 0xa7, 0xd5, 0x13, 0x33, 0xb6, 0xe4,
	0xb9, 0xce, 0x4c, 0x91, 0x97, 0x08, 0x1b, 0x02, 0xbc, 0x51, 0xe6, 0x0a, 0x71, 0x56, 0x23, 0xee,
	0xe4, 0x99, 0xb5, 0xd4, 0x85, 0x0a, 0x72, 0x62, 0xac, 0x25, 0xf1, 0x9b, 0x1b, 0x53, 0xe4, 0x19,
	0x26, 0x02, 0xfa, 0xdd, 0xaa, 0x18, 0xea, 0x9a, 0xe1, 0x7e, 0x9e, 0x59, 0x0b, 0x5d, 0xd0, 0x15,
	0x4c, 0xfc, 0xfc, 0x82, 0x18, 0x35, 0x62, 0x8a, 0xbc, 0x46, 0x78, 0x25, 0x15, 0x8c, 0x4b, 0xc9,
	0xe3, 0x28, 0xec, 0xd1, 0x84, 0xb3, 0x11, 0x82, 0x39, 0x4d, 0xf0, 0x38, 0xcf, 0xac, 0xe5, 0xdd,
	0x71, 0xd1, 0xc4, 0x24, 0xcb, 0xe9, 0x59, 0x86, 0x4c, 0x35, 0x5f, 0x21, 0xdc, 0x18, 0x7c, 0xea,
	0xff, 0x74, 0x32, 0x57, 0xf1, 0x3c, 0x97, 0x12, 0xa4, 0x77, 0xc4, 0x95, 0xa2, 0x01, 0x37, 0xa6,
	0x8b, 0x05, 0xe2, 0x5e, 0xd2, 0x87, 0x0f, 0xcb, 0xb3, 0xf5, 0xf7, 0x08, 0xd7, 0xcb, 0xa1, 0x24,
	0xef, 0x10, 0x9e, 0x1f, 0x9b, 0x4c, 0x72, 0xeb, 0xa2, 0x93, 0xac, 0x77, 0x56, 0xf3, 0xf6, 0xdf,
	0x2d, 0x80, 0xb6, 0xf9, 0xfc, 0xf3, 0x8f, 0xb7, 0xd3, 0x06, 0xb9, 0xe2, 0x78, 0xe5, 0xc2, 0x75,
	0xe2, 0x52, 0xa7, 0xff, 0x30, 0xd5, 0x69, 0x9f, 0x7c, 0x33, 0xa7, 0x4e, 0x72, 0x13, 0x7d, 0xca,
	0x4d, 0xf4, 0x25, 0x37, 0xd1, 0xd7, 0xdc, 0x44, 0x6f, 0xbe, 0x9b, 0x53, 0x7b, 0x8d, 0x81, 0xbf,
	0x5f, 0xd7, 0x4b, 0x75, 0xe3, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x9c, 0x81, 0x42, 0xd1,
	0x05, 0x00, 0x00,
}
